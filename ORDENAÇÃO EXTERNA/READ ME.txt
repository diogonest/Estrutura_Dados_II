Algoritmo de Ordenação Externa em CEste projeto implementa um algoritmo de ordenação externa, ideal para arquivos grandes que não cabem na memória RAM. O código lê um arquivo binário de entrada com números inteiros, divide-o em blocos, ordena cada bloco separadamente e, por fim, realiza o merge desses blocos para gerar um arquivo ordenado.Estrutura do Projetomain.c: Implementação principal do algoritmo de ordenação externa.gen_input.c: Gera o arquivo de entrada input.dat com números aleatórios para teste.check_output.c: Lê o arquivo de saída output.dat e exibe os números ordenados no terminal.input.dat: Arquivo binário gerado com números inteiros aleatórios.output.dat: Arquivo resultante após a ordenação. Passo a Passo para Executar1. Preparar o AmbienteCertifique-se de ter o GCC instalado.Utilize o VSCode ou qualquer outro editor de código.2. Gerar o Arquivo de Entrada:No terminal do VSCode, para criar um arquivo input.dat com números aleatórios, compile e execute o gerador de entrada:gcc gen_input.c -o gen_input./gen_input3. Compilar o Código Principal:Para criar arquivos temporários (temp0.dat, temp1.dat, etc.) e o arquivo final output.dat, compile o algoritmo de ordenação externa:gcc main.c -o ordenacao_externa./ordenacao_externa4. Verificar o Resultado:Para ver os números ordenados exibidos no terminal, compile e execute o verificador:gcc check_output.c -o check_output./check_outputExplicação do AlgoritmoDivisão em Runs: O arquivo de entrada é lido em blocos pequenos (conforme a capacidade da memória) e cada bloco é ordenado individualmente usando qsort().Merge dos Runs Ordenados: Os arquivos temporários (runs) são combinados em um único arquivo ordenado (output.dat) usando a técnica de merge.